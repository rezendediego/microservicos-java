server:
  port: 8081
spring:
  application:
    name: QUOTE-SERVICE
  datasource:
    #versao localhost Agora que produto sera dockerizado, pode acessar db pelo nome container ja que estao na mesma network
    url: jdbc:mysql://localhost:3306/quotedb
    #versao dockerizada
    #url: jdbc:mysql://db_quote:3306/db_quote
    username: root
    password: password
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        show_sql: true
eureka:
  client:
    fetch-registry: true
    register-with-eureka: true
    service-url:
      #Antes de ser dockerizado
      defaultZone: http://localhost:8761/eureka/
      #versao dockerizada
      #defaultZone: http://eureka-server:8761/eureka/
logging:
  pattern:
    level: 5p [${spring.application.name}, %X{traceId:-}, %X{spanId:-}]
  config: classpath:logback.xml

management:
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans
  tracing:
    sampling:
      probability: 1.0 #poderia ir de 0.1 ate 1.0 (0,2 ou 0.3 parece ideal) em aplicacoes de grande volume de request, nao recomendado colocar 100% porque vai travar o zipkin

# External Quote Provider
currency-layer:
  api:
    url: http://api.currencylayer.com
    access-key: 90250b228260305fd32879d45ca64799
    format: 1

springdoc:
  api-docs:
    groups:
      enabled: true
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html

